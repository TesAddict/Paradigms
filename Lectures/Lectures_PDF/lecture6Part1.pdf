%!PS-Adobe-3.0
%%Title: lecture6Part1.scm
%%For: methos
%%Creator: VIM - Vi IMproved 8.0 (2016 Sep 12)
%%CreationDate: Tue Mar  5 22:12:39 2019
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 61 42 577 752
%%DocumentMedia: letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: letter
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim80/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim80/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
612 792 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 1)61.2 744.9 ms
F0 sf
0.753 0 0 r
(; CSc 335)61.2 714.9 ms
(; Lecture 6 - Part 1)61.2 704.9 ms
(; February 26 2019)61.2 694.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 674.9 ms
(; seventh and eighth class meetings)61.2 654.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 624.9 ms
(; The focus is on some homework problems)61.2 604.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 584.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 554.9 ms
(;;;;;;;;;;;;)61.2 544.9 ms
(; Some Homework Solutions)61.2 524.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 504.9 ms
(;;;;;;;;;;;;)61.2 494.9 ms
(; develop and certify a recursive program which inputs a nonnegative integer and which)61.2 464.9 ms
(; outputs the sum of its digits.)61.2 454.9 ms
(; how to break the problem down so that it is amenable to recursion?)61.2 424.9 ms
(; either extract the last digit and work on the rest, or extract the first)61.2 404.9 ms
(; digit and work on the rest.)61.2 394.9 ms
(; extracting the last digit: \(remainder number 10\))61.2 374.9 ms
(; extracting the first digit: recursively divide by 10 until the quotient)61.2 354.9 ms
(; is less than 10 ...)61.2 344.9 ms
(; we opt for the first option)61.2 324.9 ms
(; simple recursive design)61.2 304.9 ms
0.753 0 0.753 r
(\()61.2 274.9 ms
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(sum-digits number)s
0.753 0 0.753 r
(\))s
0 g
(  )61.2 264.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(let)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0 g
(last-digit )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\))s
0 g
(        )61.2 254.9 ms
0.753 0 0.753 r
(\()s
0 g
(rest-of-number )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(truncate)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(/)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\)\))s
0 g
(  )s
0.753 0 0 r
(; or \(quotient number 10\))s
0 g
(    )61.2 244.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(if)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(zero?)s
0 g
( rest-of-number)s
0.753 0 0.753 r
(\))s
0 g
(        number)61.2 234.9 ms
(        )61.2 224.9 ms
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(+)s
0 g
( last-digit)s
(           )61.2 214.9 ms
0.753 0 0.753 r
(\()s
0 g
(sum-digits rest-of-number)s
0.753 0 0.753 r
(\)\)\)\)\))s
0.753 0 0 r
(; proof discussed in class, but you should work out the details on your own.  If you h)61.2 184.9 ms
(ave questions,)61.2 174.9 ms
(; please come to see me in office hours. )61.2 164.9 ms
(; now for an iterative version)61.2 134.9 ms
0.753 0 0.753 r
(\()61.2 104.9 ms
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(sum-digits number)s
0.753 0 0.753 r
(\))s
0 g
(  )61.2 84.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(sum-iter unprocessed sum-so-far)s
0.753 0 0.753 r
(\))s
0 g
(    )61.2 74.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(cond)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0.502 0.502 0 r
(zero?)s
0 g
( unprocessed)s
0.753 0 0.753 r
(\))s
0 g
( sum-so-far)s
0.753 0 0.753 r
(\))s
0 g
(          )61.2 64.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(else)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(sum-iter )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(truncate)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(/)s
0 g
( unprocessed )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\))s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(+)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( unprocessed )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\))s
0 g
( )s
(sum-so-far)61.2 54.9 ms
0.753 0 0.753 r
(\)\)\)\)\))s
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 2)61.2 744.9 ms
F0 sf
(  )61.2 724.9 ms
0.753 0 0.753 r
(\()s
0 g
(sum-iter number )s
0 0 0.753 r
(0)s
0.753 0 0.753 r
(\)\))s
0.753 0 0 r
(; guess-invariant: the sum of the digits in number equals the sum of the digits in unp)61.2 694.9 ms
(rocessed plus)61.2 684.9 ms
(; sum-so-far  )61.2 674.9 ms
(; termination: unprocessed is initially number, and is reduced by one digit from the r)61.2 654.9 ms
(ight with each)61.2 644.9 ms
(; iteration until no digits remain)61.2 634.9 ms
(; discussion in class, but -- same deal as above: you should make an effort to write o)61.2 604.9 ms
(ut the details on your)61.2 594.9 ms
(; own.  )61.2 584.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 554.9 ms
(;;;;;;;;;;;;)61.2 544.9 ms
(; develop and certify a recursive scheme program to test whether the digits in a)61.2 514.9 ms
(; non-negative integer are in increasing order.)61.2 504.9 ms
(; recursive)61.2 484.9 ms
0.753 0 0.753 r
(\()61.2 464.9 ms
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(digits-in-increasing-order? number)s
0.753 0 0.753 r
(\))s
0 g
(  )61.2 454.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(let)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0 g
(last-digit )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\))s
0 g
(        )61.2 444.9 ms
0.753 0 0.753 r
(\()s
0 g
(rest-of-number )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(truncate)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(/)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\)\))s
0 g
(    )61.2 434.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(if)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(zero?)s
0 g
( rest-of-number)s
0.753 0 0.753 r
(\))s
0 g
(        )61.2 424.9 ms
0 0 0.753 r
(#t)s
0 g
(        )61.2 414.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(let)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0 g
(next-to-last-digit )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( rest-of-number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\))s
0 g
(          )61.2 404.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(and)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(<)s
0 g
( next-to-last-digit last-digit)s
0.753 0 0.753 r
(\))s
0 g
(               )61.2 394.9 ms
0.753 0 0.753 r
(\()s
0 g
(digits-in-increasing-order? rest-of-number)s
0.753 0 0.753 r
(\)\)\)\)\)\))s
0.753 0 0 r
(; A proof by induction on the number of digits in number is reasonably)61.2 374.9 ms
(; straightforward, though one needs to pay attention to the various cases)61.2 364.9 ms
(; which arise.)61.2 354.9 ms
(; The basis step needs to show that the program works correctly for single-digit)61.2 334.9 ms
(; inputs: one confirms that if number has just one digit, then last-digit = number)61.2 324.9 ms
(; and rest-of-number = 0.  According to the code,)61.2 314.9 ms
(;                 \(digits-in-increasing-order? number\))61.2 294.9 ms
(; returns #t, which is correct: the digits of a single digit number are)61.2 274.9 ms
(; sorted.)61.2 264.9 ms
(; The induction hypothesis is as expected: we assume)61.2 234.9 ms
(;                \(digits-in-increasing-order? number\))61.2 214.9 ms
(; works correctly whenever number has no more than k digits.  In particular,)61.2 194.9 ms
(; we assume that the value returned is #t if the digits of number occur in increasing)61.2 184.9 ms
(; order, and #f otherwise. )61.2 174.9 ms
(; The induction step can be organized as follows: suppose number)61.2 144.9 ms
(; has k+1 digits.  Then rest-of-number, computed as)61.2 134.9 ms
(;              \(truncate \(remainder number 10\)\))61.2 114.9 ms
(; has k digits.  Thus it follows from the induction hypothesis that )61.2 94.9 ms
(;           \(digits-in-increasing-order? rest-of-number\))61.2 74.9 ms
(; returns #t iff the digits of rest-of-number are in increasing order.  The task)61.2 54.9 ms
(; facing us is to sew this knowledge into a demonstration that)61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 3)61.2 744.9 ms
F0 sf
0.753 0 0 r
(;              \(digits-in-increasing-order? number\))61.2 714.9 ms
(; returns #t iff the digits of number are in increasing order.)61.2 694.9 ms
(; Suppose first that \(digits-in-increasing-order? rest-of-number\) returns)61.2 674.9 ms
(; #t.  We see from the code that next-to-last-digit is the least significant)61.2 664.9 ms
(; digit of rest-of-number, and that last-digit is the least significant digit)61.2 654.9 ms
(; of number.  So the digits of number are in increasing order exactly when)61.2 644.9 ms
(; the test \(< next-to-last-digit last-digit\) is #t - and in this case the)61.2 634.9 ms
(; program returns #t, the value of)61.2 624.9 ms
(;  \(and \(< next-to-last-digit last-digit\))61.2 604.9 ms
(;       \(digits-in-increasing-order? rest-of-number\)\))61.2 594.9 ms
(; It is clear from this as well that the program returns #f if next-to-last-digit)61.2 574.9 ms
(; is not less than last-digit, and that this is the correct value for that case.)61.2 564.9 ms
(; What is left to consider?  Well, what if \(digits-in-increasing-order? rest-of-number)61.2 544.9 ms
(\))61.2 534.9 ms
(; returns #f, as it would - by our induction hypothesis - if the digits of)61.2 524.9 ms
(; rest-of-number are not properly sorted?  In this case, the call)61.2 514.9 ms
(;    \(digits-in-increasing-order? number\))61.2 494.9 ms
(; returns the value of the and -- that is, #f -- as it clearly should: if rest-of-numb)61.2 474.9 ms
(er's)61.2 464.9 ms
(; digits are out of order, then so of course are those of number. )61.2 454.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 424.9 ms
(;;;;;;;;)61.2 414.9 ms
(; develop and certify an iterative scheme program to test whether the digits in a)61.2 374.9 ms
(; non-negative integer are in increasing order.)61.2 364.9 ms
(; if we suppress the abstraction inherent in the recursion and look instead at the)61.2 334.9 ms
(; 'step-by-step' picture of the process' progress, we might summarize our observations)61.2 324.9 ms
(; with a diagram such as the following)61.2 314.9 ms
(;       rest-of-number                  |   already-processed)61.2 284.9 ms
(;   -----------------------------------------------------------------)61.2 274.9 ms
(;    1  2  3   4   5   6                |    7  8  9)61.2 264.9 ms
(;   -----------------------------------------------------------------)61.2 254.9 ms
(;                      ^                     ^)61.2 244.9 ms
(;                      |                     |)61.2 234.9 ms
(;                      next-to-last-digit    last-digit)61.2 224.9 ms
(;)61.2 214.9 ms
(; As the computation proceeds, the already-processed segment \(maintained only)61.2 204.9 ms
(; virtually by the program\) is kept sorted, and the rest-of-number)61.2 194.9 ms
(; segment empties, with the boundary between them sliding to the left. )61.2 184.9 ms
(; iterative)61.2 154.9 ms
0.753 0 0.753 r
(\()61.2 134.9 ms
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(iterative-digits-in-increasing-order? number)s
0.753 0 0.753 r
(\))s
0 g
(  )61.2 114.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(define)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 g
(iter result-so-far last-digit rest-of-number)s
0.753 0 0.753 r
(\))s
0 g
(    )61.2 104.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(cond)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0.502 0.502 0 r
(not)s
0 g
( result-so-far)s
0.753 0 0.753 r
(\))s
0 g
( )s
0 0 0.753 r
(#f)s
0.753 0 0.753 r
(\))s
0 g
(          )61.2 94.9 ms
0.753 0 0.753 r
(\(\()s
0.502 0.502 0 r
(zero?)s
0 g
( rest-of-number)s
0.753 0 0.753 r
(\))s
0 g
( result-so-far)s
0.753 0 0.753 r
(\))s
0 g
(          )61.2 84.9 ms
0.753 0 0.753 r
(\()s
0 0.502 0 r
(else)s
0 g
( )s
0.753 0 0.753 r
(\()s
0 0.502 0 r
(let)s
0 g
( )s
0.753 0 0.753 r
(\(\()s
0 g
(next-to-last-digit )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( rest-of-number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\))s
0 g
(                  )61.2 74.9 ms
0.753 0 0.753 r
(\()s
0 g
(iter )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(<)s
0 g
( next-to-last-digit last-digit)s
0.753 0 0.753 r
(\))s
0 g
(                        next-to-last-digit)61.2 64.9 ms
(                        )61.2 54.9 ms
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(truncate)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(/)s
0 g
( rest-of-number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\)\)\)\)\))s
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 4)61.2 744.9 ms
F0 sf
(  )61.2 724.9 ms
0.753 0 0.753 r
(\()s
0 g
(iter )s
0 0 0.753 r
(#t)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(remainder)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\))s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(truncate)s
0 g
( )s
0.753 0 0.753 r
(\()s
0.502 0.502 0 r
(/)s
0 g
( number )s
0 0 0.753 r
(10)s
0.753 0 0.753 r
(\)\)\)\))s
0.753 0 0 r
(; certification by design roles)61.2 694.9 ms
(; let us suppose that we wish to summarize the situation after k digits have been proc)61.2 664.9 ms
(essed.  At)61.2 654.9 ms
(; that point, we would have the situation suggested by the diagram, for the particular)61.2 644.9 ms
( input)61.2 634.9 ms
(; 123456789.)61.2 624.9 ms
(; Of course, one cannot base the correctness argument entirely on the processing of a )61.2 604.9 ms
(single)61.2 594.9 ms
(; input, so we need to try to capture a more general picture.)61.2 584.9 ms
(; Using a more formal notation, we give initial, or 'guess-', design roles for the pro)61.2 554.9 ms
(gram)61.2 544.9 ms
(; variables, after the first k digits of the input NUMBER have been processed:)61.2 534.9 ms
(; NUMBER = rest-of-number * 10^k + already-processed)61.2 504.9 ms
(;   this implicitly gives the design role of the 'virtual' variable, already-processed)61.2 494.9 ms
( )61.2 484.9 ms
(; last-digit = most significant digit of already-processed)61.2 454.9 ms
(; next-to-last-digit = least significant digit of rest-of-number)61.2 434.9 ms
(; these equations give the design roles of rest-of-number, last-digit and next-to-last)61.2 404.9 ms
(-digit, but we)61.2 394.9 ms
(; still need to say something about result-so-far, which is a boolean:)61.2 384.9 ms
(; result-so-far = \(digits of already-processed are in increasing order\))61.2 364.9 ms
(; That is, result-so-far is the truth value of 'digits of already-processed are in)61.2 334.9 ms
(; increasing order'.)61.2 324.9 ms
(; Now that we have them, what does one do with these initial guesses at design roles? )61.2 284.9 ms
( )61.2 274.9 ms
(; We need to show)61.2 254.9 ms
(; 1. that the design roles are achieved by the initial values)61.2 234.9 ms
(; of the program parameters;)61.2 224.9 ms
(;)61.2 214.9 ms
(; 2. that the design roles, if true on the mth)61.2 204.9 ms
(; call, are true on the \(m+1\)st call;)61.2 194.9 ms
(; 3. that the design roles, if maintained true through each call,)61.2 174.9 ms
(; and hence true when the program halts, are sufficient to show that)61.2 164.9 ms
(; the program is correct.)61.2 154.9 ms
(; One would normally start by checking 1 \(that the design roles are initially achieved)61.2 114.9 ms
(\) and 3 \(that)61.2 104.9 ms
(; the design roles are powerful enough to imply correctness if the program terminates\))61.2 94.9 ms
( before checking)61.2 84.9 ms
(; 2 \(that the design roles are preserved by calls to iter\).  The reason for this is th)61.2 74.9 ms
(at)61.2 64.9 ms
(; 1 and 3 are usually easier to check - if these do not hold, we need to develop new d)61.2 54.9 ms
(esign roles)61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 5)61.2 744.9 ms
F0 sf
0.753 0 0 r
(; before ever bothering with their preservation.)61.2 724.9 ms
(; So, let's do it.)61.2 684.9 ms
(; Do the design roles hold on our initial call, )61.2 664.9 ms
(;                  \(iter #t \(remainder number 10\) \(truncate \(/ number 10\)\)\))61.2 644.9 ms
(;                        ^           ^                   ^)61.2 624.9 ms
(;                                                        | )61.2 614.9 ms
(;                                    |                   rest-of-number)61.2 604.9 ms
(;                                    last-digit)61.2 594.9 ms
(;                        |)61.2 584.9 ms
(;                        result-so-far)61.2 574.9 ms
(; ?)61.2 564.9 ms
(; At this point, the first digit has been processed - so we need to know)61.2 534.9 ms
(;    NUMBER = \(truncate \(/ NUMBER 10\)\) * 10 + \(remainder number 10\))61.2 514.9 ms
(;    last-digit = least significant digit of NUMBER)61.2 494.9 ms
(;    next-to-last-digit = \(remainder rest-of-number 10\))61.2 474.9 ms
(;    result-so-far = \(digits of already-processed are in increasing order\))61.2 454.9 ms
0 g
(    )61.2 444.9 ms
0.753 0 0 r
(; You can easily check that all are true.)61.2 434.9 ms
(; Now for 3: if the design roles hold, and if the program stops, do we know that)61.2 384.9 ms
(; the returned value is correct?)61.2 374.9 ms
(; If the program stops because result-so-far is #f, then we know that the digits)61.2 354.9 ms
(; of already-processed are not in increasing order.  The program returns #f \(look)61.2 344.9 ms
(; at the code\), and this is the correct value.)61.2 334.9 ms
(; If the program stops because rest-of-number is 0, then NUMBER = already-processed fr)61.2 314.9 ms
(om)61.2 304.9 ms
(; our first equation.  But then the equation for result-so-far guarantees that the val)61.2 294.9 ms
(ue)61.2 284.9 ms
(; of that variable - which is the value returned by the program - is exactly the value)61.2 274.9 ms
(; of 'digits of NUMBER are in increasing order'.)61.2 264.9 ms
(; So the invariant \(the logical and of the design roles\) is strong enough to imply tha)61.2 244.9 ms
(t)61.2 234.9 ms
(; the returned value is the right one.)61.2 224.9 ms
(; All that is left to do is to check that the truth of the invariant on the kth call)61.2 174.9 ms
(; of iter implies the truth of the invariant on the \(k+1\)st call of iter.)61.2 164.9 ms
(; I believe that, at this point, I can safely leave this verification to the student. )61.2 144.9 ms
(; the termination argument is like that given for the recursive version)61.2 94.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 64.9 ms
(;;;)61.2 54.9 ms
re sp
%%PageTrailer
%%Page: 6 6
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(lecture6Part1.scm                                                               Page 6)61.2 744.9 ms
F0 sf
0.753 0 0 r
(; Suggested for practice)61.2 714.9 ms
(; What about an invariant of the form)61.2 694.9 ms
(;  NUMBER is sorted if and only if)61.2 674.9 ms
(;   each of the following holds)61.2 664.9 ms
(;      result-so-far)61.2 654.9 ms
(;      rest-of-number is sorted)61.2 644.9 ms
(;      least significant digit of rest-of-number <= last)61.2 634.9 ms
(; This has the apparent virtue of eliminating the "virtual" variables from the invaria)61.2 614.9 ms
(nt)61.2 604.9 ms
(; we discuss above.)61.2 594.9 ms
(; Does it work?  \(Hint: no, not quite.  More needs to be said about the design role fo)61.2 574.9 ms
(r)61.2 564.9 ms
(; result-so-far.\))61.2 554.9 ms
(; Another practice problem: can you rewrite the program to eliminate the parameter)61.2 534.9 ms
(; result-so-far, while remaining iterative?  \(Hint: yes, but the proof needs to change)61.2 524.9 ms
(; as well.\))61.2 514.9 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 6
%%EOF
